Task 6: Procedures, Functions, and Loops in PL/SQL (Based on Online Food 

Ordering System)

Case Study: Online Food Ordering System

Objective: 

The objective of this task is to design, implement, and execute PL/SQL 

procedures, functions, and loops to handle real-world business scenarios related to an 

online food ordering system. This will help in automating transactions, improving 

database efficiency, and enforcing business rules in a structured manner.

Step 1: Ensure the Necessary Tables Exist

Before running the procedures and functions, create the required tables in your Oracle 

Database.

DROP TABLE OrderTable PURGE;

DROP TABLE Delivery PURGE;

DROP TABLE Menu_Item PURGE;

CREATE TABLE OrderTable (

 Order_ID NUMBER PRIMARY KEY,

 Cust_ID NUMBER,

 Order_Date DATE,

 Order_Total NUMBER(10,2),

 Payment_Status VARCHAR2(20)

);

CREATE TABLE Delivery (

 Order_ID NUMBER PRIMARY KEY,

 Delivery_Status VARCHAR2(20),

 FOREIGN KEY (Order_ID) REFERENCES OrderTable(Order_ID)

);

CREATE TABLE Menu_Item (

 Item_ID NUMBER PRIMARY KEY,

 Item_Name VARCHAR2(100),

 Price NUMBER(10,2)

);

INSERT INTO OrderTable VALUES (1, 101, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 

250.50, 'Pending');

INSERT INTO OrderTable VALUES (2, 102, TO_DATE('2024-02-02', 'YYYY-MM-DD'), 

400.75, 'Paid');

INSERT INTO OrderTable VALUES (3, 103, TO_DATE('2024-02-03', 'YYYY-MM-DD'), 

150.00, 'Pending');

INSERT INTO Delivery VALUES (1, 'Pending');

INSERT INTO Delivery VALUES (2, 'Delivered');

INSERT INTO Delivery VALUES (3, 'Pending');
INSERT INTO Menu_Item VALUES (1, 'Pizza', 500);

INSERT INTO Menu_Item VALUES (2, 'Burger', 300);

INSERT INTO Menu_Item VALUES (3, 'Pasta', 450);

1. Procedure to Update Payment Status

Step 1: Create a Procedure

Expected Output:

Step 2: Execution
Expected Output:
Query 2: Function to Calculate Total Revenue

Step 1: Create a Function

Expected Output:

Step 2: Execution

Query 3: Loop: Mark All Undelivered Orders as "Delay
